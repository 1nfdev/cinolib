- avoid headers from serialized vector and scalar fields (it’s far more general)
- edit slicer interface (receive the full state as parameter)
- edit texturing interface (receive the full info as parameter)
- make control panel for volume meshes and skeletons
- Gradients on hexmeshes are buggy. hint: check per face normals!
- add max_depth to Profiler to avoid lengthy reports
- consider avoiding to use a tree into the profiler. Sorting entries w.r.t. call time should do the job…
- extend the concept of subdivisions from hexmesh to any mesh
- add Additive Manufacturing stuff (load and process CLI files)…
- Add cylinder and spheres list (with colors, size and so forth) in the render list used for meshes, so that there will be only on unified rendering access point
- Refactor PointInsideMeshCache, it should return ALL the elements containing the
  query point and let the application choose the best one
- make a DrawableOctree (and visually test the octree)
- Add cache for eigen solvers - avoid refactoring matrices multiple times
- Use robust geometric computations (volumes, dihedral angles ecc.) 
  (ref. => Lecture Notes on Geometric Robustness di Jonathan Richard Shewchuk)
- Add cotan laplacian  normalization
  (ref => https://www.ceremade.dauphine.fr/~peyre/teaching/manifold/tp4.html)
- Improve on mesh rendering (shaders, VBOs)
- Fix Logger (it does not flush the streaming buffer until the program is closed)

- coding examples to add:
   - scalar field visualization
   - vector field visualization
   - polyharmonic functions
   - topology editing operators
   - quality metrics and distortions
   - conformal maps
   - heat based geodesics
   - formats convertes
   - triangle/tetgen/graphcuts wrap
   - polygon mesh construction (via dualization)
   - polyhedral mesh construction (via dualization)   
   - conformalized heat flow
   - integral curves (with tessellation)
   - isocurves (with tessellation)
   - isosurfaces (with tessellation)
   - subdivision schemas
   - spherical fibonacci sampling	